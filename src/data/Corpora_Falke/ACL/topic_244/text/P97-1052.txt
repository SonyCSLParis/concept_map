1 In t roduct ion
Lexical Functional Grammar (LFG) f-structures (Kaplan and Bresnan, 1982; Dalrymple et al., 1995a) are attribute-value matrices representing high level syntactic information abstracting away from the particulars of surface realization such as word order or inflection while capturing underlying generalizations. Although f-structures are first and foremost syntactic representations they do encode some semantic information, namely basic predicate argument structure in the semantic form value of the PRED attribute. Previous approaches to providing semantic components for LFGs concentrated on providing schemas for relating (or translating) fstructures (in)to sets of disambiguated semantic representations which are then interpreted model theoretically (Halvorsen, 1983; Halvorsen and Kaplan, 1988; Fenstad et al., 1987; Wedekind and Kaplan, 1993; Dalrymple et al., 1996). More recently, (Genabith and Crouch, 1996) presented a method for providing a direct and underspecified interpretation of f-structures by interpreting them as quasi-logical forms (QLFs) (Alshawi and Crouch, 1992). The approach was prompted by striking structural similarities between f-structure
['PRED ~COACH ~ ] SUBJ NUM SG
/SPEC EVERY PRED 'pick (T SUB J, T OBJ)'
[PRED 'PLAYER'] L°B: iN'M s/ J LSPE¢ and QLF representations
?Scope : pick (t erm(+r, <hUm= sg, spec=every>, coach, ?Q, ?X), term (+g, <num=sg, spec=a>, player, ?P, ?R) ) both of which are fiat representations which allow underspecification of e.g. the scope of quantificational NPs. In this companion paper we show that f-structures are just as easily interpretable as UDRSs (Reyle, 1993; Reyle, 1995): coach(x) layer(y)
I pick(x,y) I
We do this in terms of a translation function r from f-structures to UDRSs. The recursive part of the definition states that the translation of an f-structure is simply the union of the translation of its component parts:
'F1 71 ...
While there certainly is difference in approach and emphasis between f-structures, QLFs and UDRSs the motivation foi" flat (underspecified) representations in each case is computational. The details of the LFG and UDRT formalisms are described at length elsewhere: here we briefly present the very basics of the UDRS formalism; we define a language of wff-s (well-formed f-structures); we define a mapping 7" from f-structures to UDRSs together with a reverse mapping r -1 and we show correctness with respect to an independent semantics (Dalrymple et al., 1996). Finally, unlike QLF the UDRS formalism comes equipped with an inference mechanism which operates directly on the underspecified representations without the need of considering cases. We illustrate our approach with a simple example involving the UDRS deduction component (see also (KSnig and Reyle, 1996) where amongst other things the possibility of direct deductions on f-structures is discussed).
2 Underspec i f ied D iscourse Representat ion S t ructures
In standard DRT (Kamp and Reyle, 1993) scope relations between quantificational structures and operators are unambiguously specified in terms of the structure and nesting of boxes. UDRT (Reyle, 1993; Reyle, 1995) allows partial specifications of scope relations. Textual definitions of UDRSs are based on a labeling (indexing) of DRS conditions and a statement of a partial ordering relation between the labels. The language of UDRSs is based on a set L of labels, a set Ref of discourse referents and a set Rel of relation symbols. It features two types of conditions: 1
1. (a) i f /E L and x E Ref then l : x is a condition (b) if 1 E L, R E Rel a n-place relation and
Xl, . . ,Xn E Ref then l : P(Xl, ..,Xn) is a condition
(c) if li, lj E L then li : '~lj is a condition (d) if li, lj, Ik E L then li : lj ::¢, l~ is a condition (e) if l, l l , . . . , l n E L then l : V( l l , . . . , ln) is a condition
2. if li, Ij E L then li < lj is a condition where _< is a partial ordering defining an upper semi-lattice with a top element.
UDRSs are pairs of a set of type 2 conditions with a set of type 1 conditions:
• A UDRS /C is a pair (L,C) where L = ( i ,<) is an upper semi-lattice of labels and C a set of conditions of type 1 above such that if li : ~lj E
1The definition abstracts away from some of the complexities in the full definitions of the UDRS language (Reyle, 1993). The full language also contains type 1 conditions of the form 1 : a( l l , . . . , ln ) indicating that (/1,..., In) are contributed by a single sentence etc.
C then l j :< li E £ and ifl i : lj ~ lk E C then lj < li,lk < li E £.2
The construction of UDRSs, in particular the specification of the partial ordering between labeled conditions in £, is constrained by a set of meta-level constraints (principles). They ensure, e.g., that verbs are subordinated with respect to their scope inducing arguments, that scope sensitive elements obey the restrictions postulated by whatever syntactic theory is adopted, that potential antecedents are scoped with respect to their anaphoric potential etc. Below we list the basic cases:
• Clause Boundedness: the scope of genuinely quantificational structures is clause bounded. If lq and let are the labels associated with the quantificational structure and the containing clause, respectively, then the constraint lq < let enforces clause boundedness.
• Scope of Indefinites: indefinites labeled li may take arbitrarily wide scope in the representation. They cannot exceed the top-level DRS IT, i.e. li < IT.
• Proper Names: proper names, 7r, always end up in the top-level DRS, IT. This is specified lexically by IT : r
The semantics is defined in terms of disambiguations & It takes its cue from the definition of the consequence relation; in the most recent version (Reyle, 1995) with correlated disambiguations 8t
V61( r~, D M') resulting in a conjunctive interpretation of a goal UDRS. 3 In contrast to other proof systems the UDRS proof systems (Reyle, 1993; Reyle, 1995; Kbnig and Reyle, 1996) operate directly on underspecified representations avoiding (whenever possible) the need to consider disambiguated cases. 4
3 A language o f we l l - fo rmed f - s t ruc tures
The language of wff-s (well-formed f-structures) is defined below. The basic vocabulary consists of five disjoint sets: GFs (subcategorizable grammatical functions), GF,~ (non-subcategorizable grammatical functions), SF (semantic forms), ATR (attributes) and ATOM (atomic values):
2This closes Z: under the subordination relations induced by complex conditions of the form -~K and Ki =~ Kj.
38 is an o~eration mapping a into one of its disambiguations c~ . The original semantics in (Reyle, 1993) took its cue from V~i3/ij(F 6i ~ v~ 6j) resulting in a disjunctive semantics.
4 Soundness and completeness results are given for the system in (Reyle, 1993).
• CFs = {SUB J, OBJ, COMP, XCOMP,...} • GFn -~ {ADJUNCTS,RELMODS,...} • SF = {coach(}, support(* SUB J, 1" OUJ},...}
• ATR "~ {SPEC,NUM,PER, GEN...} • ATOM = {a, some, every, most , . . . , SG, PL, . . .}
The formation rules pivot on the semantic form PRED values.
* i f [10 E SF then [PRED lI 0 ]~ e wff-s
• if ~o1~,...,~o,,[] e wff-s and H{T F1 , . . . , * rn} e SF then ~ e wff-s where ~ is of the form
PRgD [1(* I~1,...,1" FN) ~] ~ ~ff-8 r. where for any two substructures ¢~] and ¢r~1 occurring in ~d~], 1 :~ m except possibly where ¢-¢ .s
• if a E ATR, v E ATOM, ~o E wff-s where
~] i so f the form [PRED.,. I I ( . . . ) ]~]andc~ dom(~]) then
ED n(...) ~1 e wl/-s
The side condition in the second clause ensures that only identical substructures can have identical tags. Tags are used to represent reentrancies and will often appear vacuously. The definition captures f-structures that are complete, coherent and consistent.6
4 An f - s t ruc ture - UDRS re turn t r ip
In order to illustrate the basic idea we will first give a simplified graphical definition of the translation r from f-structures to UDRSs. The full textual definitions are given in the appendix• The (U)DRT construction principles distinguish between genuinely
SWhere - denotes syntactic identity modulo permutation of attribute-value pairs.
6Proof: simple induction on the formation rules for wff-s using the definitions of completeness, coherence and consistency (Kaplan and Bresnan, 1982). Because of lack of space here we can not consider non-subcategorizable grammatical functions. For a treatment of those in a QLF-style interpretation see (Genabith and Crouch, 1996). The notions of substructure occurring in an .fstructure and dom(~o) can easily be spelled out formally. The definition given above uses textual representations of f-structures. It can easily be recast in terms of hierarchical sets, finite functions, directed graphs etc.
quantificational NPs and indefinite NPs. 7 Accordingly we have
F2 ~o2 , . .
II(zl, "2,.-., x~)
[SPEC every ] • ri(iVRE D H0 ) :=
The formulation of the reverse translation r - 1 from UDRSs back into f-structures depends on a map between argument positions in UDRS predicates and grammatical functions in LFG semantic forms:
I1( ~1, ~2, ..., ~, ) I I I I n( , r l , tru, ..., , r~ } This is, of course, the province of lexical mapping theories (LMTs). For our present purposes it will be sufficient to assume a lexically specified mapping.
• r - l ( re1 g2 To. ) := n(zl, x2,..., x~) n{r rl,T r2,...,, rN)
• := LPRE D 110 sPzc every ] PRED no J
7Proper names are dealt with in the full definitions in the appendix.
Figure 1: The UDRS rT-(~l) =/C~
If the lexical map between argument positions in UDRS predicates and grammatical functions in LFG semantic forms is a function it can be shown that for all ~ E wff-s:
~-l(r(~)) = Proof is by induction on the complexity of ~. This establishes a one-to-one correspondence between subsets of the UDRS and LFG formalism. Note that 7" -1 is a partial function on UDRS representations. The reason is that in addition to full underspecification UDRT allows partial underspecification of scope for which there is no correlate in the original LFG f-structure formalism.
5 Correctness of the Translat ion A correctness criterion for the translation can be defined in terms of preservation of truth with respect to an independent semantics. Here we show correctness with respect to the linear logic (a)s based LFG semantics of (Dalrymple et al., 1996):
[ r (~) ] --- [~(~) ]
Correctness is with respect to (sets of) disambiguations and truthfl
{ulu = 6(r(~))} - {ll~(~ ) ~, l} where 6 is the UDRS disambiguation and b'u the linear logic consequence relation. Without going into details/f works by adding subordination constraints turning partial into total orders. In the absence of scope constraints l° for a UDRS with n quantificational structures Q (that is including indefinites) this results in n! scope readings, as required. Linear logic deductions F-u produce scopings in terms of the order
SThe notation a(~a) is in analogy with the LFG a - projection and here refers to the set of linear logic meaning constructors associated with 99.
9This is because the original semantics in (Dalrymple et al., 1996) is neither underspecified nor dynamic. See e.g. (Genabith and Crouch, 1997) for a dynamic and underspecified version of a linear logic based semantics.
Z°Here we need to drop the clause boundedness constraint.
in which premises are consumed in a proof. Again, in the absence of scope constraints this results in n! scopings for n quantifiers Q. Everything else being equal, this establishes correctness with respect to sets of disambiguations.
6 A Worked Example
We illustrate our approach in terms of a simple example inference. The translations below are obtained with the full definitions in the appendix.
[~ Every coach supported a player. Smith is a coach. Smith supported a player.
Premise ~ is ambiguous between an wide scope and a narrow scope reading of the indefinite NP. From [-fl and [] we can conclude Ii] which is not ambiguous. Assume that the following (simplified) f-structures !a[~], ¢[ ] and ~[i] are associated with [-fl, [] and [if, respectively:
[ [PRED tCOACH'] suBJ LsPEc EVERY j [ ]
'SUPPORT (~" ['f] J PRED SUBJ,T OBJ)' L TM L sPEc [PRED 'PLAYER' ] A [~ SUBJ [PRED 'SMITH']~] ] PRED 'COACH (~ SUB J)' ] []
SUBJ PRED
({t~: z®, v~® %~,%: ~] ,z~ : ~oa~h(~), t~ : ~G] ' l~ : pt~,~,e,( ~m ), Zmo : s,,pport( ~® , ~)},
=
({IT : z~],lr :smith(z~),l[-g]o: coach(xM} , {lNo < Iv})
I 1} _~ smith(z~) = IC[~] $
I co ch( M) l In the calculus of (Reyle, 1995) we obtain the UDRS K:Ii I associated with the conclusion in terms of an application of the rule of detachment (DET): l' : support(x~, x~])}, {l~]. < IT, l~] ° < l~] l~ < IT }) smith( x~ ) p uer(@ $
M) which turns out to be the translation image under r of the f-structure ~[i] associated with the conclusion ~.la Summarizing we have that indeed: r r ( lil) which given that 7- is correct does come as too much of a surprise. The possibility of defining deduction rules directly on f-structures is discussed in (KSnig and Reyle, 1996).
l XNote that the conclusion UDRS K;[I l can be "collapsed" into the fully specified DRS zy smith(z) player(y)
7 Conc lus ion and Fur ther Work
In the present paper we have interpreted f-structures as UDRSs and illustrated with a simple example how the deductive mechanisms of UDRT can be exploited in the interpretation. (KSnig and Reyle, 1996) amongst other things further explores this issue and proposes direct deduction on LFG f-structures. We have formulated a reverse translation from UDRSs back into f-structures and established a one-to-one correspondence between subsets of the LFG and UDRT formalisms. As it stands, however, the level of f-structure representation does not express the full range of subordination constraints available in UDRT. In this paper we have covered the most basic parts, the easy bits. The method has to be extended to a more extensive fragment to prove (or disprove) its mettle. The UDRT and QLF (Genabith and Crouch, 1996) interpretations of f-structures invite comparison of the two semantic formalisms. Without being able to go into any great detail, QLF and UDRT both provide underspecified semantics for ambiguous representations A in terms of sets {col, . . . , COn } of fully disambiguated representations COi which can be obtained from A. For a simple core fragment (disregarding dynamic effects, wrinkles of the UDRS and QLF disambiguation operations/)~ and 79q etc.) everything else being equal, for a given sentence S with associated QLF and UDRS representations Aq and A~, respectively, we have that Dq(Aq) = {COl,..., q CO~} and "D~,(Au) = {CO?,..., CO,I} and pairwise [CO/q ] = [[CO u] for 1 < i < n and col 6 ~)q(Aq) and COl' e 7)~(A=). That is-the QLF and UDRT semantics coincide with respect to truth conditions Of representations in corresponding sets of disambiguations. This said, however, they differ with respect to the semantics assigned to the underspecified representations Aq and An. [[Aq~ is defined in terms of a supervaluation construction over {CO q . . . . , CO q} (Alshawi and Crouch, 1992) resulting in the three-valued:
[Aq] = 1 ifffor all co~ E ~)q(Aq), [COq] ~. 1 [Aq]] 0 ifffor no COl E :Dq(Aq), [COl] = 1 [Aq] = undefined otherwise
The UDRT semantics is defined classically and takes its cue from the definition of the semantic consequence relation for UDRS. In (Reyle, 1995):
+' A +')
(where IE e+ =COi E :D,,(]E)) which implies that a goal UDRS is interpreted conjunctively:
[A~,~ 95 = 1 ifffor all CO u E 7:)~,(A~,), [COr~ 9s = 1 [Au]gs = 0 otherwise while the definition in (Reyle, 1993):
+' A results in a disjunctive interpretation:
[A.] 93 = 1 ifffor some O}' E V.(A,~), [0~]93 = 1 [Au]]93 = 0 otherwise
It is easy to see that the UDRS semantics [o~] 95 and [[od] 93 each cover the two opposite ends of the QLF semantics [[%]]: [o=] 95 covers definite truth while [[Ou] 93 covers definite falsity. On a final note, the remarkable correspondence between LFG f-structure and UDRT and QLF representations (the latter two arguably being the major recent underspecified semantic representation formalisms) provides further independent motivation for a level of representation similar to LFG fstructure which antedates its underspecified semantic cousins by more than a decade.
8 Appendix We now define a translation r from f-structures to UDRSs. The (U)DRT construction principles distinguish between genuinely quantificational NPs, indefinite NPs and proper names. Accordingly we have
• ~([pRED n(t r l , . . . , t r~) [i]):= / - ' " kr. ~ . [ ] uYmo: n(N2,..., %])} where
{ x[~] iff FiE{SUBJ,OBJ,...} 7~] := l[~]o iff r i E {COMP, XCOMP}
* T.[~([SPEC EVERY ] ffRrD nO m) := : 'm,Wmtm ,/ml : : -< l[3], l~o ~- lm2} [3"], [SPEC A ]
" r=t/PREDL HO J ]]]) :=
. T~]([PRED l-I 0 ]~) := {tT : xm,tT : n(xm),lmo _< l~}
The first clause defines the recursive part of the translation function and states that the translation of an f-structure is simply the union of the translations of its component parts. The base cases of the definition are provided by the three remaining clauses. They correspond directly to the construction principles discussed in section 2. The first one deals with genuinely quantificational NPs, the second one with indefinites and the third one with proper names. Note that the definitions ensure clause boundedness of quantificational NPs {l[/] < l[] } , allow indefinites to take arbitrary wide scope {1[]] <_ h-} and assign proper names to the top level of the resulting UDRS {iv : z~, /v : H(zffj)} as required. The indices are our book-keeping devices for label and variable management. F-structure reentrancies are handled correctly without further stipulation. Atomic attribute-value pairs can be included as unary definite relations. For the reverse mapping assume a consistent UDRS labeling (e.g. as provided by the v mapping) and a lexically specified mapping between subcategorizable grammatical functions in LFG semantic form and argument positions in the corresponding UDRT predicates:
II( gel, ~g2, . ' ' , Xn ) I I I I n( Try, Tr2, ..., t r , )
The scaffolding which allows us to ire)construct a f-structure from a UDRS is provided by UDRS subordination constraints and variables occurring in UDRS conditions) 2 The translation recurses on the semantic contributions of verbs. To translate a UDRS ~ = (£:,C) merge the structural with the content constraints into the equivalent ~t = E U C. Define a function 0 ("dependents") on referents, labels and merged UDRSs as in F igure 2. 0 is constrained to O(qi, IV.) C ]C. Given a discourse referent x and a UDRS, 0 picks out components of the UDRS corresponding to proper names, indefinite and genuinely quantificational NPs with x as implicit argument. Given a label l, 0 picks out the transitive closure over sentential complements and their dependents. Note that for simple, non-recursive UDRSs ]C, 0 defines a partition {{/: I I (x l , . . . , xn)} ,O(x i ,~) , . . . , O(~cn,~)} of/(;.
s ifIg = {/~o : 1-I(~1,... ,~,)}t~7~ then r-l(]C) :=
PREp n(t F1, . . . ,T FN) IN]
SPEC EVERY ] PRED II 0 [ ]
12The definition below ignores subordination constraints. It assumes proper UDRSs, i.e. UDRS where all the discourse referents are properly bound. Thus the definition implements the "garbage in - garbage out" principle. It also assumes that discourse referents in "quantifier prefixes" are disjoint. It is straightforward to extend the definition to take account of subordinat~ion constraints if that is desired but, as we remarked above, the translation image (the resulting f-structures) cannot in all cases reflect the constraints.
{la, : Th,la, : II(rh)} U {.~ < l¢,,l()~ < la,) E E} if T/i e Ref O(o~,/~):= {l,~, l,~.Voil~,,~,l,~,, :~?,,1,~. :II(o~},U{A<_I,~,~I(A<I,~,~)E~} if rliE Ref
{l,, I]('y~,...,7,~)}OD(7~,K.),...,D(%,If. ) if ~EL
Figure 2: The "dependents" function 0 (where 0(~i, K:) C_/C).
. T-a({/. :x,l~ :n(x)}~Sub):= sPEc A ] PRED I-i() [ ]
° T- I ({ IT : X, IT : I I (x )}~S~b) := [PREp n0 ][]
Note that r -1 is a partial function from UDRSs to f-structures. The reason is that that f-structures do not represent partial subordination constraints, in other words they are fully underspecified. Finally, note that r and r -1 are recursive (they allow for arbitrary embeddings of e.g. sentential complements). This may lead to structures outside the first-order UDRT-fragment. As an example the reader may want to check the translation in F igure 3 and furthermore verify that the reverse translation does indeed take us back to the original (modulo renaming of variables and labels) UDRS.
