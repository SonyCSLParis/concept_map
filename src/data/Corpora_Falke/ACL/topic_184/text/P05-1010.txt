1 Introduction
Variants of PCFGs form the basis of several broadcoverage and high-precision parsers (Collins, 1999; Charniak, 1999; Klein and Manning, 2003). In those parsers, the strong conditional independence assumption made in vanilla treebank PCFGs is weakened by annotating non-terminal symbols with many ‘features’ (Goodman, 1997; Johnson, 1998). Examples of such features are head words of constituents, labels of ancestor and sibling nodes, and subcategorization frames of lexical heads. Effective features and their good combinations are normally explored using trial-and-error.
This paper defines a generative model of parse trees that we call PCFG with latent annotations (PCFG-LA). This model is an extension of PCFG models in which non-terminal symbols are annotated with latent variables. The latent variables work just like the features attached to non-terminal symbols. A fine-grained PCFG is automatically induced from parsed corpora by training a PCFG-LA model using an EM-algorithm, which replaces the manual feature selection used in previous research.
The main focus of this paper is to examine the effectiveness of the automatically trained models in parsing. Because exact inference with a PCFG-LA, i.e., selection of the most probable parse, is NP-hard, we are forced to use some approximation of it. We empirically compared three different approximation methods. One of the three methods gives a performance of 86.6% (F � , sentences � 40 words) on the standard test set of the Penn WSJ corpus.
Utsuro et al. (1996) proposed a method that automatically selects a proper level of generalization of non-terminal symbols of a PCFG, but they did not report the results of parsing with the obtained PCFG. Henderson’s parsing model (Henderson, 2003) has a similar motivation as ours in that a derivation history of a parse tree is compactly represented by induced hidden variables (hidden layer activation of a neural network), although the details of his approach is quite different from ours.
2 Probabilistic model
PCFG-LA is a generative probabilistic model of parse trees. In this model, an observed parse tree is considered as an incomplete data, and the corregrinned
Figure 1: Tree with latent annotations &(' )+* (complete data) and observed tree & (incomplete data).
sponding complete data is a tree with latent annotations. Each non-terminal node in the complete data is labeled with a complete symbol of the form ,-' ./* , where , is the non-terminal symbol of the corresponding node in the observed tree and . is a latent annotation symbol, which is an element of a fixed set 0 .
=
;
;�F_G
;g5
�
3�j
;
=
=
3>&(' )+*
;g9
(1)
Using dynamic programming, the theoretical bound of the time complexity of the summation in Eq. 1 is reduced to be proportional to the number of non-terminal nodes in a parse tree. However, the calculation at node l still has a cost that exponentially grows with the number of l ’s daughters because we must sum up the probabilities of v 0wvyx{z � combinations of latent annotation symbols for a node with n daughters. We thus took a kind of transformation/detransformation approach, in which a tree is binarized before parameter estimation and restored to its original form after parsing. The details of the binarization are explained in Section 4.
Using syntactically annotated corpora as training data, we can estimate the parameters of a PCFG- LA model using an EM algorithm. The algorithm is a special variant of the inside-outside algorithm of Pereira and Schabes (1992). Several recent work also use similar estimation algorithm as ours, i.e, inside-outside re-estimation on parse trees (Chiang and Bikel, 2002; Shen, 2004).
The rest of this section precisely defines PCFG- LA models and briefly explains the estimation algorithm. The derivation of the estimation algorithm is largely omitted; see Pereira and Schabes (1992) for details.
2.1 Model definition We define a PCFG-LA | as a tuple | 1 }
L�~t
 a set of terminal symbols 0
 a set of latent annotation symbols 
 a set of observable CFG rules @"3R,(' .Y*
;
 the probability of the occurrence of a complete symbol ,(' .Y* at a root node
G
' 0*
We use , 5te5:9:9:9 for non-terminal symbols in L�~t ; Ł
�:5
5EP5:9:9:9 for latent annotation symbols in 0 . L�~t<' 0* denotes the set of complete non-terminal symbols, i.e., L(~{<' 0*I1,(' .Y*ﬀvﬂ,dL~{
.0 .
Note that latent annotation symbols are not attached to terminal symbols.


=
'

;
?0
We assume that non-terminal nodes in a parse tree & are indexed by integers k1 5:9:9:95E , starting from the root node. A complete tree is denoted by &(' )+* , where ) 1 3�. �65:9:9:95 .Y¡ ; d0 ¡ is a vector of latent annotation symbols and .m¢ is the latent annotation symbol attached to the k -th non-terminal node.
We do not assume any structured parametrizations in G and @ ; that is, each G 3�j ; 3�j£  ' 0_* ; and
@"3R,-' ./* ; 3R,-' ./*_L
~{ ' 0* ; is itself a parameter to be tuned. Therefore, an annotation symbol, say, . , generally does not express any commonalities among the complete non-terminals annotated by . , such as ,-' ./* 5t ' ./* 5 ^6Zﬃa .
=
3�j
;g5 (2)
= is the number of non-terminal nodes in & .
�
3�.
;
¢
L�~t denotes the non-terminal label of the k -th node. µ If node k is a pre-terminal node above a terminal symbol Łﬀ¶ , then ³ ¢ ¬
3�.
; .
µ Otherwise, let ¸ and ¹ be the two daughter nodes of k . Then
³
;
3>& ; 1¿¾
We define forward probabilities À ¢ ¬
¢
¬
.
µ If node k has a right sibling ¹ , let ¸ be the mother node of k . Then
À r�s
G 3RL�¶c' .Á¶K*KJML ¢ ' .Y*VL�½Á' .8½* ;
F À
3�. ; is defined analogously.
2.3 Estimation We now derive the EM algorithm for PCFG-LA, which estimates the parameters Â13
G"5
¢
�
¡�Ä
;
Å , and = 3R)v & ;
=
;
. Using the Lagrange multiplier method and re-arranging the results using the backward and forward probabilities, we obtain the update formulas in Figure 2.
3 Parsing with PCFG-LA In theory, we can use PCFG-LAs to parse a given sentence Ł by selecting the most probable parse:
&·ÑÓÒ]Ô�Õ¨1AÖ�× where àT3�Ł ; denotes the set of possible parses for Ł under the observable grammar  . While the optimization problem in Eq. 4 can be efficiently solved
á
�
¼
§ ò
â
�
Figure 2: Parameter update formulas.
; in PCFG-LA models (see Eq. 2 and Eq. 3) makes it difficult to apply such techniques to solve Eq. 4.
Actually, the optimization problem in Eq. 4 is NP- hard for general PCFG-LA models. Although we omit the details, we can prove the NP-hardness by observing that a stochastic tree substitution grammar (STSG) can be represented by a PCFG-LA model in a similar way to one described by Goodman (1996a), and then using the NP-hardness of STSG parsing (Simaa´n, 2002).
The difficulty of the exact optimization in Eq. 4 forces us to use some approximations of it. The rest of this section describes three different approximations, which are empirically compared in the next section. The first method simply limits the number of candidate parse trees compared in Eq. 4; we first create N-best parses using a PCFG and then, within the N-best parses, select the one with the highest probability in terms of the PCFG-LA. The other two methods are a little more complicated, and we explain them in separate subsections.
&
¬
3>&(' )+* ;g9 (5)
We call & ÅÓ' )+ÅÝ* a Viterbi complete tree. Such a tree can be obtained in ﬂT3tv Łv U ; time by regarding the PCFG-LA as a PCFG with annotated symbols.1
=
;
, and thus & Å and &mÑÓÒ]Ô�Õ are almost equally ‘good’ in terms of their marginal probabilities.
;
;
; approximates =
;
;
.
5$#É . The first component,
"
, is a multiset of chart items of the form 3R,
³
³
^
;

" indicates that there exists a parse tree in à3�Ł ; that contains a constituent with the non-terminal label , that spans
1For efficiency, we did not actually parse sentences with %�� &� but selected a Viterbi complete tree from a packed representation of candidate parses in the experiments in Section 4.
2In practice, fully constructing a packed representation of '
â
�ë has an unrealistically high cost for most input sentences. Alternatively, we can use a packed representation of a subset of '
â
�ë
, which can be obtained by parsing with beam thresholding, for instance. An approximate distribution (
â
�)� �ë
'
�*� � ë
, is renormalized so that the total mass for the subset sums to 1.
ã
ç
é
Figure 3: Two parse trees and packed representation of them.
"
"
; #
; is a set of possible daughters of k if k is not a pre-terminal node, and #
3�k
;
126Łþ½
 if k is a pre-terminal node above Ł�½ . Two parse trees for a sentence Ł 1 Ł � Ł�7KŁ�U and a packed representation of them are shown in Figure 3.
We require that each tree &Mà3�Ł ; has a unique representation as a set of connected chart items in "
. A packed representation satisfying the uniqueness condition is created using the CKY algorithm with the observable grammar  , for instance.
The approximate distribution, ÇT3>&-v Ł ;
, is defined as a PCFG, whose CFG rules

;

; to denote the probability with which k- "
;
;g5 kC¡@?
" is the unique representation of & . To measure the closeness of approximation by
ÇT3>&v Ł under the normalization constraints on ; ¥ and ; yields closed form solutions for ; ¥ and ; , as shown in Figure 4. = in and =
" is a pre-terminal node above Łþ½ , then = in 3�kg' .Y* ; 1 G 3R,-' ./*IJŁ�½ ; .
µ Otherwise, rDC{Û in 3Ó¹m' ﬂ* ;g5 where  ¶ and �½ denote non-terminal symbols of chart items ¸ and ¹ .
The outside probability, = out, is calculated using = in and PCFG-LA parameters along the packed structure, like the outside probabilities for PCFGs.
Once we have computed ;3�kmJG: ; and ; ¥ 3�k ;
, the parse tree & that maximizes ÇT3>&-v Ł ; is found using a Viterbi algorithm, as in PCFG parsing.
Several parsing algorithms that also use insideoutside calculation on packed chart have been proposed (Goodman, 1996b; Simaa´n, 2003; Clark and Curran, 2004). Those algorithms optimize some evaluation metric of parse trees other than the posterior probability = 3>&-v Ł ; , e.g., (expected) labeled constituent recall or (expected) recall rate of dependency relations contained in a parse. It is in contrast with our approach where (approximated) posterior probability is optimized.
4 Experiments
We conducted four sets of experiments. In the first set of experiments, the degree of dependency of trained models on initialization was examined because EM-style algorithms yield different results with different initial values of parameters. In the second set of experiments, we examined the relationship between model types and their parsing performances. In the third set of experiments, we compared the three parsing methods described in the previous section. Finally, we show the result of a parsing experiment using the standard test set.
We used sections 2 through 20 of the Penn WSJ corpus as training data and section 21 as heldout data. The heldout data was used for early stopping; i.e., the estimation was stopped when the rate
�
-
�
-
� in
â
- be the non-terminal symbol of -
. Then J.T â
U
VXW VZY [ \ZW \]Y
Figure 5: Original subtree.
of increase in the likelihood of the heldout data became lower than a certain threshold. Section 22 was used as test data in all parsing experiments except in the final one, in which section 23 was used. We stripped off all function tags and eliminated empty nodes in the training and heldout data, but any other pre-processing, such as comma raising or base-NP marking (Collins, 1999), was not done except for binarizations.
4.1 Dependency on initial values
To see the degree of dependency of trained models on initializations, four instances of the same model were trained with different initial values of parameters.3 The model used in this experiment was created by CENTER-PARENT binarization and v 0wv was set to 16. Table 1 lists training/heldout data loglikelihood per sentence (LL) for the four instances and their parsing performances on the test set (section 22). The parsing performances were obtained using the approximate distribution method in Section 3.2. Different initial values were shown to affect the results of training to some extent (Table 1).
3The initial value for an annotated rule probability, á
âäã
� �É� å ç�� è6�ßé�� êg�ßë
, was created by randomly multiplying the maximum likelihood estimation of the corresponding PCFG rule probability, �
âäã
åiçﬀéQë
�
âäã
åiçﬀéQë where ` is a random number that is uniformly distributed in �badcfe4g cfe0g and í ï is a normalization constant.
1 2 3 4 average hji training LL -115 -114 -115 -114 -114 h 0.41 heldout LL -114 -115 -115 -114 -114 h 0.29
LR 86.7 86.3 86.3 87.0 86.6 h 0.27 LP 86.2 85.6 85.5 86.6 86.0 h 0.48
Table 1: Dependency on initial values.
CENTER-PARENT CENTER-HEAD U
Figure 6: Four types of binarization (H: head daughter).
 for each model by reading off grammar rules from the binarized training trees. For each binarization method, PCFG-LA models with different numbers of latent annotation symbols, v 0wvﬂ1M
5$s�5ut5$v
F1
Figure 7: Model size vs. parsing performance.
The relationships between the number of parameters in the models and their parsing performances are shown in Figure 7. Note that models created using different binarization methods have different numbers of parameters for the same v 0wv . The parsing performances were measured using F � scores of the parse trees that were obtained by re-ranking of 1000-best parses by a PCFG.
We can see that the parsing performance gets better as the model size increases. We can also see that models of roughly the same size yield similar performances regardless of the binarization scheme used for them, except the models created using LEFT binarization with small numbers of parameters ( v 0Wvc1  and s ). Taking into account the dependency on initial values at the level shown in the previous experiment, we cannot say that any single model is superior to the other models when the sizes of the models are large enough.
The results shown in Figure 7 suggest that we could further improve parsing performance by increasing the model size. However, both the memory size and the training time are more than linear in v 0wv , and the training time for the largest ( v 0wv�1[3w ) models was about 15 hours for the models created using CENTER-PARENT, CENTER-HEAD, and LEFT and about 20 hours for the model created using RIGHT. To deal with larger (e.g., v 0wv = 32 or 64) models, we therefore need to use a model search that reduces the number of parameters while maintaining the model’s performance, and an approximation during training to reduce the training time.
84.5
85.5
86.5
0 1 2 3 4 5 6 7 8 9 10
F1 approximate distribution
4.3 Comparison of parsing methods
The relationships between the average parse time and parsing performance using the three parsing methods described in Section 3 are shown in Figure 8. A model created using CENTER-PARENT with v 0Wvc1[3w was used throughout this experiment.
The data points were made by varying configurable parameters of each method, which control the number of candidate parses. To create the candidate parses, we first parsed input sentences using a PCFG4, using beam thresholding with beam width x
= max is the PCFG-score of the best parse in the chart. The parses remaining in the chart were the candidate parses for the second and the third methods. The different lines for the second and the third methods correspond to different values of y .
The third method outperforms the other two methods unless the parse time is very limited (i.e., z 1
4The PCFG used in creating the candidate parses is roughly the same as the one that Klein and Manning (2003) call a ‘markovised PCFG with vertical order = 2 and horizontal order = 1’ and was extracted from Section 02-20. The PCFG itself gave a performance of 79.6/78.5 LP/LR on the development set. This PCFG was also used in the experiment in Section 4.4.
{ 40 words LR LP CB 0 CB This paper 86.7 86.6 1.19 61.1
Klein and Manning (2003) 85.7 86.9 1.10 60.3 Collins (1999) 88.5 88.7 0.92 66.7
Charniak (1999) 90.1 90.1 0.74 70.1 { 100 words LR LP CB 0 CB This paper 86.0 86.1 1.39 58.3
Klein and Manning (2003) 85.1 86.3 1.31 57.2 Collins (1999) 88.1 88.3 1.06 64.0
Charniak (1999) 89.6 89.5 0.88 67.6
Table 2: Comparison with other parsers.
=
3>&
; both in the estimation (as the objective function) and in the parsing (as the score of a parse).
4.4 Comparison with related work Parsing performance on section 23 of the WSJ corpus using a PCFG-LA model is shown in Table 2. We used the instance of the four compared in the second experiment that gave the best results on the development set. Several previously reported results on the same test set are also listed in Table 2.
Our result is lower than the state-of-the-art lexicalized PCFG parsers (Collins, 1999; Charniak, 1999), but comparable to the unlexicalized PCFG parser of Klein and Manning (2003). Klein and Manning’s PCFG is annotated by many linguistically motivated features that they found using extensive manual feature selection. In contrast, our method induces all parameters automatically, except that manually written head-rules are used in binarization. Thus, our method can extract a considerable amount of hidden regularity from parsed corpora. However, our result is worse than the lexicalized parsers despite the fact that our model has access to words in the sentences. It suggests that certain types of information used in those lexicalized
5Actually, the number of parses contained in the packed forest is more than 1 million for over half of the test sentences when | = /u} î and ` ì /u} î ﬁ
, while the number of parses for which the first method can compute the exact probability in a comparable time (around 4 sec) is only about 300.
parsers are hard to be learned by our approach.
